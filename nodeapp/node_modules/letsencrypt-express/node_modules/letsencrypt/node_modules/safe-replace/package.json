{
  "name": "safe-replace",
  "version": "1.0.2",
  "description": "A micro-module for safely replacing a file.",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/coolaj86/node-safe-replace.git"
  },
  "keywords": [
    "cluster",
    "race",
    "condition",
    "file",
    "write",
    "replace",
    "config",
    "json"
  ],
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com/"
  },
  "license": "(MIT OR Apache-2.0)",
  "bugs": {
    "url": "https://github.com/coolaj86/node-safe-replace/issues"
  },
  "homepage": "https://github.com/coolaj86/node-safe-replace#readme",
  "readme": "safe-replace\n============\n\nA micro-module for safely replacing a file.\n\nThis is intended to be generally safe even when a function that writes a file\nis accidentally called twice (as may happen with node cluster).\n\nCommandline Reference\n---------------------\n\nIf I want to safely replace a file with a new version, I would do so like this:\n\n```bash\n# create the new version\ntouch keep.txt.RANDOM.tmp\n\n# remove the previous backup\nrm -f keep.txt.bak\n\n# move the current version to the backup\nmv keep.txt keep.txt.bak\n\n# move the new version to the current\nmv keep.txt.RANDOM.tmp keep.txt\n```\n\nIf `keep.txt` became corrupt and I wanted to use the backup,\nI would do this:\n\n```bash\n# copy the backup to the new version\nrsync keep.txt.bak keep.txt\n```\n\nIn Node\n-------\n\nI ported that proccess to node.\n\n```\nsfs.writeFileAsync\nsfs.stageAsync\nsfs.commitAsync\nsfs.revertAsync\n```\n\n```js\n// default behavior is to concat (filename + '.' + rnd() + '.tmp')\nvar safeReplace = require('safe-replace').create({ tmp: 'tmp', bak: 'bak' });\n\nvar data = new Buffer('A priceless document');\nsafeReplace.writeFileAsync('keep.txt', data, 'ascii').then(function () {\n  fs.readdir('.', function (nodes) {\n    console.log('file system nodes', nodes);\n    // keep.txt\n    // keep.txt.bak\n  });\n});\n\n// let's say I want to write a tmp file and not commit it... weird\nsafeReplace.stageAsync('keep.txt', data, 'ascii').then(function (tmpname) {\n  fs.readdir('.', function (nodes) {\n    console.log('file system nodes', nodes);\n    // keep.txt.ac71teh8mja.tmp\n  });\n});\n\n// let's say I wrote keep.txt.x7t7sq926.tmp with my own mechanism\nsafeReplace.commitAsync('keep.txt.x7t7sq926.tmp', 'keep.txt').then(function () {\n  fs.readdir('.', function (nodes) {\n    console.log('file system nodes', nodes);\n    // keep.txt\n    // keep.txt.bak\n  });\n});\n\n// let's say I want to revert the file from the '.bak'\nsafeReplace.revertAsync('keep.txt').then(function () {\n  fs.readdir('.', function (nodes) {\n    console.log('file system nodes', nodes);\n    // keep.txt\n    // keep.txt.bak\n  });\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "safe-replace@1.0.2",
  "dist": {
    "shasum": "c6e1bd19d3aa6eae8f38ca65d583d404eddfb7ea"
  },
  "_from": "safe-replace@^1.0.2",
  "_resolved": "https://registry.npmjs.org/safe-replace/-/safe-replace-1.0.2.tgz"
}
